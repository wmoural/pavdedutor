import numpy as np
import pandas as pd
from tabulate import tabulate

# Definição de coeficientes das patologias de PAVIMENTO RÍGIDO
coef_rigido = {
    (1, 'A'): [-2.1667211900e-12, 6.5029336700e-10, -8.2890019500e-08, 5.8209276100e-06, -2.4329614900e-04, 6.0300907500e-03, -7.9385038000e-02, 2.6572744300e-01, 6.6019386100e+00, 1.1087421000e-01],
    (1, 'M'): [-1.8648217400e-15, 9.1918333900e-13, -1.8995208300e-10, 2.1338962300e-08, -1.4116979600e-06, 5.5482473700e-05, -1.1993757500e-03, 1.6448209600e-03, 1.6352186700e+00, -3.3624229300e-02],
    (1, 'B'): [-5.6724035900e-16, 2.1872318600e-13, -3.3290929000e-11, 2.5203624000e-09, -9.7816294000e-08, 1.7665181800e-06, 9.1148915200e-07, -4.5203963100e-03, 7.8833641200e-01, 1.3895030300e-02],
    (2, 'A'): [-1.0846866900e-15, 5.9591008500e-13, -1.3557122100e-10, 1.6558330200e-08, -1.1658138700e-06, 4.5572976300e-05, -6.3423723500e-04, -3.2133966100e-02, 2.5905820800e+00, 1.2667494700e-01],
    (2, 'M'): [-1.2783628300e-15, 5.4551134900e-13, -9.6382195900e-11, 9.0426713300e-09, -4.7033821400e-07, 1.1165286000e-05, 1.8884920800e-04, -3.2094034400e-02, 2.0057992700e+00, 5.1529871300e-02],
    (2, 'B'): [6.1804616500e-16, -3.1259314400e-13, 6.5177588100e-11, -7.2467372800e-09, 4.6384324200e-07, -1.7309949600e-05, 3.9041119000e-04, -1.0829672400e-02, 9.7169739900e-01, 2.5172884900e-02],
    (3, 'A'): [2.1480711100e-14, -1.0453059300e-11, 2.1605620700e-09, -2.4748322100e-07, 1.7212871800e-05, -7.5146108700e-04, 2.0771654100e-02, -3.7221380600e-01, 5.3606142500e+00, 3.3069730600e-01],
    (3, 'M'): [1.0007987900e-15, -4.3088410400e-13, 7.8416701100e-11, -7.9375727000e-09, 5.0305177400e-07, -2.2292128800e-05, 8.3517789600e-04, -3.5386475300e-02, 1.9641891900e+00, -5.0117520200e-02],
    (3, 'B'): [-9.7294613600e-16, 5.2377944300e-13, -1.1782762600e-10, 1.4334326600e-08, -1.0173699500e-06, 4.1954379300e-05, -8.8178095200e-04, -2.1632264700e-03, 1.1439062400e+00, 6.5221170800e-02],
    (4, 'A'): [3.6705807400e-15, -1.6761706400e-12, 3.2279574500e-10, -3.4197256400e-08, 2.1868819900e-06, -8.8036180600e-05, 2.3484937700e-03, -5.1879633900e-02, 1.9805319500e+00, -1.5500882000e-01],
    (4, 'M'): [1.0942046900e-15, -5.6741079900e-13, 1.2097746800e-10, -1.3721947400e-08, 8.9336185300e-07, -3.3557093700e-05, 6.9743477400e-04, -1.0836051400e-02, 9.0904138800e-01, 1.6959243900e-02],
    (4, 'B'): [-9.7986896400e-16, 4.8715511600e-13, -1.0121264900e-10, 1.1333416200e-08, -7.3763823500e-07, 2.8778323500e-05, -7.6448952300e-04, 1.7064282400e-02, 1.8582632300e-01, 7.4115138800e-02],
    (5, 'A'):8,
    (5, 'M'):4,
    (5, 'B'):2,
    (6, 'A'): [2.0890807900e-15, -9.8718400500e-13, 1.9550252200e-10, -2.1070614500e-08, 1.3450951600e-06, -5.2292378500e-05, 1.2829212600e-03, -2.6834783000e-02, 9.9727575400e-01, 5.7551999400e-02],
    (6, 'M'): [2.2069465500e-16, -5.0549589400e-14, -6.5424345800e-13, 1.2151280700e-09, -1.4943752100e-07, 8.4099965500e-06, -2.3975981800e-04, 8.1121051400e-04, 4.0185714300e-01, 4.5451642200e-02],
    (6, 'B'): [7.9352417200e-16, -3.8033656800e-13, 7.7142923800e-11, -8.6026801800e-09, 5.7401138300e-07, -2.3379889600e-05, 5.6698054600e-04, -7.7699949900e-03, 1.1874714800e-01, -1.3064427700e-01],
    (7, 'A'): [1.6326078300e-15, -9.0510970400e-13, 2.1409232900e-10, -2.8258155200e-08, 2.2900379900e-06, -1.1890388700e-04, 4.0889603000e-03, -1.0203848900e-01, 2.5402623300e+00, -1.5593793300e-01],
    (7, 'M'): [9.1401565100e-16, -4.7072563200e-13, 9.9487425000e-11, -1.1282170200e-08, 7.5463946600e-07, -3.1182105700e-05, 8.5410307400e-04, -2.1491834500e-02, 9.6221793300e-01, -1.0500312600e-01],
    (7, 'B'): [-2.1744449300e-15, 9.3868333300e-13, -1.6848702500e-10, 1.6296969600e-08, -9.1874938400e-07, 3.0064732600e-05, -4.7892699700e-04, -3.9577217500e-03, 6.0394550200e-01, -2.4573334700e-02],
    (8, 'A'): [2.5519136500e-15, -1.2302867300e-12, 2.5443715600e-10, -2.9687635400e-08, 2.1684451100e-06, -1.0463323700e-04, 3.4895752500e-03, -8.8985543100e-02, 2.4201024400e+00, -3.8008879400e-02],
    (8, 'M'): [-2.3471388300e-15, 1.2522275300e-12, -2.7998043600e-10, 3.4202956500e-08, -2.4974847800e-06, 1.1231898700e-04, -3.0927733800e-03, 4.6367217400e-02, 3.9950607400e-01, 9.4318915800e-02],
    (8, 'B'): [-2.1214311800e-15, 1.0072357800e-12, -2.0018746600e-10, 2.1522858800e-08, -1.3516802000e-06, 5.0453418200e-05, -1.1477719500e-03, 1.6941557700e-02, 2.2289672500e-01, 7.9869800700e-02],
    (9, 'A'): [-2.3604169500e-15, 1.0790243100e-12, -2.0750035500e-10, 2.1726459900e-08, -1.3345486100e-06, 4.7774157400e-05, -8.7958223800e-04, 6.4217994700e-04, 5.9986598100e-01, -9.8561962200e-03],
    (9, 'M'): [1.1377239100e-16, -5.5769967500e-14, 1.2284429900e-11, -1.5861604700e-09, 1.3081052800e-07, -7.0893721500e-06, 2.5863613900e-04, -7.7448320800e-03, 3.6134635800e-01, 1.7866344800e-02],
    (9, 'B'): [3.15964337e-15, -1.63151265e-12,  3.56179657e-10, -4.26990135e-08, 3.05240584e-06, -1.31928098e-04, 3.31248129e-03, -4.30487196e-02, 2.84808357e-01, -7.75277918e-01],
    (10, 'A'): [2.3793158800e-16, -1.3471796700e-13, 3.1125611600e-11, -3.8259022800e-09, 2.7084077700e-07, -1.1045311400e-05, 2.4132440000e-04, -3.4413753000e-03, 2.1792031300e-01, -6.7538538400e-04],
    (11, 'A'): [-6.2377347300e-15, 2.6467624400e-12, -4.6749645900e-10, 4.4449462700e-08, -2.4569783900e-06, 7.9552748500e-05, -1.4305382500e-03, 8.9889785000e-03, 6.1331757700e-01, 9.3667423900e-02],
    (12, 'A'): [7.3517796200e-15, -3.5669057600e-12, 7.3781629800e-10, -8.5211437000e-08, 6.0654347500e-06, -2.7947065700e-04, 8.7066351200e-03, -2.0233553500e-01, 4.4325353300e+00, -5.3211348200e-02],
    (12, 'M'): [3.3921525700e-15, -1.7066421700e-12, 3.6707396800e-10, -4.4182084600e-08, 3.2821339200e-06, -1.5796718600e-04, 5.1689699600e-03, -1.2939967400e-01, 3.2135843000e+00, -1.2990324800e-01],
    (12, 'B'): [1.6473800800e-15, -6.9638059500e-13, 1.2222566700e-10, -1.1649952100e-08, 6.7557522500e-07, -2.6827988200e-05, 9.0587227800e-04, -3.3528748900e-02, 1.5556887000e+00, -4.1086730600e-02],
    (13, 'A'): [5.5279284500e-12, -1.6014485700e-09, 1.9651322000e-07, -1.3307597500e-05, 5.4342438900e-04, -1.3756585500e-02, 2.1495328000e-01, -2.0473506500e+00, 1.3131527500e+01, 6.7964755300e+00],
    (13, 'M'): [4.2246363000e-13, -1.1409622500e-10, 1.2820566900e-08, -7.7636635700e-07, 2.7521711600e-05, -5.8923309900e-04, 8.1305788500e-03, -1.0390450200e-01, 2.3700892700e+00, -1.5928388500e-02],
    (13, 'B'): [-2.7779642700e-13, 7.4288544700e-11, -8.2314754900e-09, 4.8776284600e-07, -1.6591340200e-05, 3.1891255300e-04, -2.8982071000e-03, -8.6320770500e-03, 1.0410431600e+00, -8.3149342600e-03],
    (14, 'A'): [-6.7465197800e-16, 2.5960148100e-13, -3.6211379700e-11, 1.5797624000e-09, 1.3408536400e-07, -2.1734126500e-05, 1.3514985900e-03, -5.3280022300e-02, 1.9892227600e+00, 1.6049670100e-02],
    (14, 'M'): [5.8284141700e-16, -3.3084506300e-13, 7.9712123100e-11, -1.0799275400e-08, 9.1693089400e-07, -5.1352167200e-05, 1.9489895000e-03, -5.2650519300e-02, 1.2701539000e+00, 8.0814783300e-02],
    (14, 'B'): [-1.9312456400e-15, 7.8246892100e-13, -1.2752627000e-10, 1.0570956200e-08, -4.5735910400e-07, 8.8867390800e-06, -8.8447863600e-06, -3.1666549700e-03, 2.3617912900e-01, 2.5814694800e-02],
    (15, 'A'): [-6.2647888800e-16, 2.3084467900e-13, -3.1532589800e-11, 1.6307477600e-09, 3.3599039100e-08, -7.9899766700e-06, 3.7034592800e-04, -7.7318279900e-03, 1.6146251700e-01, -1.2851013900e+00],
    (16, 'A'): [1.1594998500e-15, -5.6430871800e-13, 1.1427197600e-10, -1.2494212700e-08, 8.0278699700e-07, -3.1241867500e-05, 7.7222342200e-04, -1.7924942600e-02, 8.3743796700e-01, 1.1803272800e-01],
    (16, 'M'): [2.0117653500e-16, -4.5540551500e-14, -2.5213989200e-12, 1.7999035600e-09, -2.3917100000e-07, 1.5396569000e-05, -5.1858847000e-04, 5.6938930500e-03, 4.3036773700e-01, 6.7020731300e-02],
    (16, 'B'): [-3.5087234800e-15, 1.4918505200e-12, -2.6269661000e-10, 2.4831414200e-08, -1.3693875400e-06, 4.5123762200e-05, -8.8718483900e-04, 9.7398282800e-03, 1.4240995200e-01, 7.4112022000e-02],
    (17, 'A'): [-4.3897703800e-16, 2.4526719100e-13, -5.9469210500e-11, 8.0645372200e-09, -6.5792631200e-07, 3.2348702100e-05, -8.9867793200e-04, 9.4990235800e-03, 7.3801897700e-01, 3.5016186500e-01],
    (17, 'M'): [1.1916285500e-15, -5.2650388100e-13, 9.8142061500e-11, -1.0009139400e-08, 6.0271686300e-07, -2.1357924600e-05, 4.0854360400e-04, -4.2234512600e-03, 3.5451194100e-01, 1.7178254700e-01],
    (17, 'B'): [1.5254163100e-15, -6.2496587100e-13, 1.0345395100e-10, -8.7230902900e-09, 3.7707996900e-07, -6.1172717700e-06, -1.0540033600e-04, 4.1404309100e-03, 1.8315464300e-01, 1.9932391900e-01],
    (18, 'A'): [3.6404931400e-15, -1.6251826100e-12, 3.0509829000e-10, -3.1404145000e-08, 1.9450719400e-06, -7.5844273200e-05, 1.9908841700e-03, -4.6096047000e-02, 1.9353163300e+00, -3.7629973400e-02],
    (18, 'M'): [1.5704924300e-15, -7.8443546500e-13, 1.6267608300e-10, -1.8113851100e-08, 1.1693106700e-06, -4.4100685500e-05, 9.3650171400e-04, -1.3825617700e-02, 9.2662002700e-01, -1.5289201400e-02],
    (18, 'B'): [-2.5529400900e-15, 1.1850121400e-12, -2.3126127800e-10, 2.4561540900e-08, -1.5364398800e-06, 5.7956131500e-05, -1.3934764000e-03, 2.4508351000e-02, 1.4425375000e-01, 1.5540477900e-01],
    }

# Definição de coeficientes do valor deduzível total de PAVIMENTO RÍGIDO
coef_valor_ded_rigido = {
    ('q1'): [1.04672465e-09,-2.37421439e-07,3.43581746e-05,-2.69743055e-03,1.04922880e+00,8.25002845e-01],
    ('q2'): [-1.29203973e-10,4.84590745e-08,-3.49117561e-06,-1.71746739e-03,8.84580533e-01,-1.64482334e+00],
    ('q3'): [2.44305177e-10,-1.54943140e-07,3.77601941e-05,-5.08888336e-03,9.25716284e-01,-5.45222052e+00],
    ('q4'): [1.70634355e-10,-1.17542096e-07,3.05142670e-05,-4.32501310e-03,8.37369899e-01,-6.01681207e+00],
    ('q5'): [1.94873131e-10,-1.55390267e-07,4.61285658e-05,-6.89699757e-03,9.97705531e-01,-1.29537853e+01],
    ('q6'): [8.56318975e-11,-9.50211593e-08,3.67347765e-05,-6.83506436e-03,1.03838517e+00,-1.85776828e+01]
    }

# Calcular ICP em rígido
def deduzivel_rigido(patologia: int, severidade: str, densidade: float) -> float:
    # Esta função realiza o cálculo do valor deduzível de uma patologia a partir dos parâmetros definidos para pavimento rígido
    
    # Chegagem de inputs
    num_patologias = set(range(1, 19))
    severidades = {'A', 'M', 'B'}
    
    if patologia not in num_patologias:
        raise ValueError('Classe de patologia inexistente')

    sev = severidade.upper()
    if sev not in severidades:
        raise ValueError('Classe de severidade inexistente')

    if densidade is not None and not 0 <= densidade <= 100:
        raise ValueError('Densidade fora do valor permitido')
    
    # Correção de limites máximos e mínimos das curvas por patologia e severidade
    if patologia == 1 and severidade.upper() == 'A' and densidade > 60:
        densidade = 60

    if patologia == 9 and severidade.upper() == 'B' and densidade < 15:
        densidade = 15

    if patologia == 13 and densidade > 60:
        densidade = 60

    if patologia == 15 and densidade < 13:
        densidade = 13
    
    # Busca dos coeficientes relativos à patologia e severidades informadas.   
    try:
        coef = coef_rigido[(patologia, sev)]
    except KeyError:
        raise ValueError(f'Coeficientes não definidos para patologia {patologia} e severidade {sev}')
    
    # Exceção para patologia do tipo 5 (Defeito na selagem das juntas)
    if patologia == 5:
        return float(coef)
    
    else:    
        return round(float(np.polyval(coef, densidade)))
        
# Calcular valor deduzível corrigido em rígido
def deduzivel_total_rigido(dataframe: pd.DataFrame, coluna_patologia: str, coluna_valor_ded: str):
    # Esta função realiza o cálculo do valor deduzível total corrigido das patologias para pavimento rígido
    
    # Ajuste de input para valor máximo da curva
    try:
        valor_ded_total = float(dataframe[coluna_valor_ded].sum())
        
        if valor_ded_total > 200:
            valor_ded_total = 200
        
    except ValueError:
        raise ValueError(f'Coluna {coluna_valor_ded} deve conter apenas valores numéricos')
        
    q = dataframe.loc[dataframe[coluna_valor_ded]>5, coluna_patologia].nunique()
    
    # Ajuste de input para valor máximo permitido de q's
    if q > 6:
        q = 6      

    coef = coef_valor_ded_rigido[(f'q{q}')]
    
    # Correção de limites máximos e mínimos da curva de valor dedutível corrigido
    if q == 1 and valor_ded_total > 100:
        valor_ded_total = 100

    if q == 2 and valor_ded_total < 13:
        valor_ded_total = 13

    if q == 2 and valor_ded_total > 160:
        valor_ded_total = 160

    if q == 3 and valor_ded_total < 17:
        valor_ded_total = 17

    if q == 3 and valor_ded_total > 180:
        valor_ded_total = 180

    if q == 4 and valor_ded_total < 24:
        valor_ded_total = 24

    if q == 4 and valor_ded_total > 200:
        valor_ded_total = 200

    if q == 5 and valor_ded_total < 36:
        valor_ded_total = 36

    if q == 5 and valor_ded_total > 200:
        valor_ded_total = 200

    if q == 6 and valor_ded_total < 54:
        valor_ded_total = 54

    if q == 6 and valor_ded_total > 200:
        valor_ded_total = 200
    
    return round(float(np.polyval(coef, valor_ded_total)))
    
# Função final para cálculo de valor deduzível em ambos pavimentos
def deduzivel(patologia: int, severidade: str, densidade: float, tipo: str) -> float:
    
    if tipo.upper() == 'RIGIDO':
    
        return deduzivel_rigido(patologia, severidade, densidade)
    
    elif tipo.upper() == 'FLEXIVEL':
        
        raise ValueError('Pavimento flexível ainda não disponível')

# Função final para cálculo de valor deduzível corrigido total em ambos pavimentos
def deduzivel_corrigido(dataframe: pd.DataFrame, coluna_patologia: str, coluna_valor_deduzivel: str, tipo: str) -> float:
    
    if tipo.upper() == 'RIGIDO':
    
        return deduzivel_total_rigido(dataframe, coluna_patologia, coluna_valor_deduzivel)
    
    elif tipo.upper() == 'FLEXIVEL':
        
        raise ValueError('Pavimento flexível ainda não disponível')

# Função para indicação das patologias
def patologias():
    nome_patologias = {
        1:	'Alçamento de placas',
        2:	'Fissura de canto',
        3:	'Placa divida (rompida)',
        4:	'Escalonamento ou degrau',
        5:	'Defeito na selagem das juntas',
        6:	'Desnível pavimento-acostamento',
        7:	'Fissuras lineares',
        8:	'Grandes reparos existentes',
        9:	'Pequenos reparos existentes',
        10:	'Desgaste superficial',
        11:	'Bombeamento',
        12:	'Quebras localizadas',
        13:	'Passagem de nível',
        14:	'Fissura superficial e escamação do concreto',
        15:	'Fissura de retração plástica',
        16:	'Esborcinamento ou quebra de canto',
        17:	'Esborcinamento de juntas',
        18:	'Placa bailarina',
    }

    return print(tabulate(nome_patologias.items(), headers=['Código', 'Patologias - Pavimento rígido'], tablefmt='pretty'))